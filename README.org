* Single-File Baselibc
An even-more simplified libc.
This project from [[https://github.com/PetteriAimonen/Baselibc/][Baselibc]], which in turn is based on klibc and tinyprintf modules, and licensed under the BSD license.

* Dependencies
After flattening the original Baselibc directory structure, the following files existed in the =src/= directory:
| asprintf.c | memcpy.c  | strcasecmp.c  | strnlen.c    |
| assert.h   | memfile.c | strcat.c      | strntoimax.c |
| bsearch.c  | memmem.c  | strchr.c      | strntoumax.c |
| bzero.c    | memmove.c | strcmp.c      | strpbrk.c    |
| calloc.c   | memrchr.c | strcpy.c      | strrchr.c    |
| ctype.h    | memset.c  | strcspn.c     | strsep.c     |
| fgets.c    | memswap.c | strdup.c      | strspn.c     |
| inttypes.h | mrand48.c | string.h      | strstr.c     |
| jrand48.c  | nrand48.c | strlcat.c     | strtok.c     |
| klibc.h    | qsort.c   | strlcpy.c     | strtok_r.c   |
| lrand48.c  | realloc.c | strlen.c      | tinyprintf.c |
| malloc.c   | sprintf.c | strncasecmp.c | utils.h      |
| malloc.h   | srand48.c | strncat.c     | vasprintf.c  |
| memccpy.c  | sscanf.c  | strncmp.c     | vprintf.c    |
| memchr.c   | stdio.h   | strncpy.c     | vsprintf.c   |
| memcmp.c   | stdlib.h  | strndup.c     | vsscanf.c    |

Most of these files depend on one or more other files from the same directory, for example =bsearch.c= depends on =stdlib.h= and =klibc.h=.
Most also depend on one or more "system" headers, which are provided by the operating system.
We can find dependencies automatically by asking the compiler with =cc -MMD -MF file.d -c file.o file.c=.
Using =-MD= instead of =-MMD= also includes system headers, but for now we only want to find user headers.

Their contents look like this:
#+begin_src shell :results output :exports results
ls src/*.d | head -n 4 | xargs cat | sed -e 's/src\///g'
#+end_src

#+RESULTS:
: asprintf.o: asprintf.c stdio.h klibc.h string.h \
:   stdlib.h
: bsearch.o: bsearch.c stdlib.h klibc.h
: bzero.o: bzero.c string.h klibc.h
: fgets.o: fgets.c stdio.h klibc.h string.h
: ... (many more omitted for clarity)

To better visualize these dependencies, we will make a visual graph.
#+name: deps
#+begin_src python :results output :exports none
import glob
def fn(d,src):
  with open(src) as f:
    lines = f.read()
  _,f,*deps = (lines.replace('src/','').replace('\\\n  ','').split())
  for dep in deps:
    d[dep] = d.get(dep,[]) + [f]

d = {}
for src in glob.glob('src/*.d'):
  fn(d,src)

for k,v in d.items():
  for f in v:
    print(f'"{f}"->"{k}"')
#+end_src

#+RESULTS: deps
#+begin_example
"memcpy.c"->"string.h"
"vsscanf.c"->"string.h"
"strchr.c"->"string.h"
"strcspn.c"->"string.h"
"strtok.c"->"string.h"
"strspn.c"->"string.h"
"strncat.c"->"string.h"
"strsep.c"->"string.h"
"strcasecmp.c"->"string.h"
"memrchr.c"->"string.h"
"memfile.c"->"string.h"
"memswap.c"->"string.h"
"strncasecmp.c"->"string.h"
"strlcpy.c"->"string.h"
"strstr.c"->"string.h"
"strcat.c"->"string.h"
"strnlen.c"->"string.h"
"vsprintf.c"->"string.h"
"memcmp.c"->"string.h"
"strpbrk.c"->"string.h"
"strlen.c"->"string.h"
"sprintf.c"->"string.h"
"qsort.c"->"string.h"
"memccpy.c"->"string.h"
"strncmp.c"->"string.h"
"strdup.c"->"string.h"
"vasprintf.c"->"string.h"
"vprintf.c"->"string.h"
"sscanf.c"->"string.h"
"calloc.c"->"string.h"
"strrchr.c"->"string.h"
"realloc.c"->"string.h"
"memmove.c"->"string.h"
"strtok_r.c"->"string.h"
"strndup.c"->"string.h"
"strcmp.c"->"string.h"
"bzero.c"->"string.h"
"memset.c"->"string.h"
"strcpy.c"->"string.h"
"memchr.c"->"string.h"
"strlcat.c"->"string.h"
"tinyprintf.c"->"string.h"
"strncpy.c"->"string.h"
"memmem.c"->"string.h"
"fgets.c"->"string.h"
"asprintf.c"->"string.h"
"memcpy.c"->"klibc.h"
"vsscanf.c"->"klibc.h"
"strchr.c"->"klibc.h"
"mrand48.c"->"klibc.h"
"strcspn.c"->"klibc.h"
"strtok.c"->"klibc.h"
"strspn.c"->"klibc.h"
"strncat.c"->"klibc.h"
"strsep.c"->"klibc.h"
"strcasecmp.c"->"klibc.h"
"memrchr.c"->"klibc.h"
"memfile.c"->"klibc.h"
"memswap.c"->"klibc.h"
"strncasecmp.c"->"klibc.h"
"strlcpy.c"->"klibc.h"
"strstr.c"->"klibc.h"
"strcat.c"->"klibc.h"
"lrand48.c"->"klibc.h"
"strnlen.c"->"klibc.h"
"strntoumax.c"->"klibc.h"
"nrand48.c"->"klibc.h"
"vsprintf.c"->"klibc.h"
"memcmp.c"->"klibc.h"
"strpbrk.c"->"klibc.h"
"strlen.c"->"klibc.h"
"sprintf.c"->"klibc.h"
"qsort.c"->"klibc.h"
"srand48.c"->"klibc.h"
"memccpy.c"->"klibc.h"
"strncmp.c"->"klibc.h"
"strdup.c"->"klibc.h"
"vasprintf.c"->"klibc.h"
"vprintf.c"->"klibc.h"
"sscanf.c"->"klibc.h"
"calloc.c"->"klibc.h"
"strrchr.c"->"klibc.h"
"jrand48.c"->"klibc.h"
"realloc.c"->"klibc.h"
"memmove.c"->"klibc.h"
"strtok_r.c"->"klibc.h"
"strndup.c"->"klibc.h"
"strcmp.c"->"klibc.h"
"bzero.c"->"klibc.h"
"malloc.c"->"klibc.h"
"memset.c"->"klibc.h"
"strcpy.c"->"klibc.h"
"memchr.c"->"klibc.h"
"bsearch.c"->"klibc.h"
"strlcat.c"->"klibc.h"
"tinyprintf.c"->"klibc.h"
"strncpy.c"->"klibc.h"
"memmem.c"->"klibc.h"
"strntoimax.c"->"klibc.h"
"fgets.c"->"klibc.h"
"asprintf.c"->"klibc.h"
"vsscanf.c"->"ctype.h"
"strcasecmp.c"->"ctype.h"
"strncasecmp.c"->"ctype.h"
"strntoumax.c"->"ctype.h"
"vsscanf.c"->"inttypes.h"
"strntoumax.c"->"inttypes.h"
"strntoimax.c"->"inttypes.h"
"vsscanf.c"->"stdio.h"
"memfile.c"->"stdio.h"
"vsprintf.c"->"stdio.h"
"sprintf.c"->"stdio.h"
"vasprintf.c"->"stdio.h"
"vprintf.c"->"stdio.h"
"sscanf.c"->"stdio.h"
"tinyprintf.c"->"stdio.h"
"fgets.c"->"stdio.h"
"asprintf.c"->"stdio.h"
"mrand48.c"->"stdlib.h"
"lrand48.c"->"stdlib.h"
"nrand48.c"->"stdlib.h"
"qsort.c"->"stdlib.h"
"srand48.c"->"stdlib.h"
"strdup.c"->"stdlib.h"
"vasprintf.c"->"stdlib.h"
"calloc.c"->"stdlib.h"
"jrand48.c"->"stdlib.h"
"realloc.c"->"stdlib.h"
"strndup.c"->"stdlib.h"
"malloc.c"->"stdlib.h"
"bsearch.c"->"stdlib.h"
"asprintf.c"->"stdlib.h"
"realloc.c"->"malloc.h"
#+end_example

#+headers: :file deps.png :cmdline -Tpng
#+begin_src dot :var graph=deps :exports results
digraph {
rankdir=LR
$graph
}
#+end_src

#+RESULTS:
[[file:deps.png]]

After condensing all sources into one C file, the system headers remain, so we show them now.
These headers depend on the architecture and operating system used to compile the library.
In this example, 

#+headers: :file sysdeps.png :cmdline -Tpng
#+begin_src dot :var graph=deps :exports results
digraph {
rankdir=LR
$graph
}
#+end_src

#+RESULTS:
[[file:sysdeps.png]]
